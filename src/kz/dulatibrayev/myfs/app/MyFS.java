package kz.dulatibrayev.myfs.app;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Scanner;

public class MyFS {

	public static void main(String[] args) {
		Scanner scanner = new Scanner(System.in);

		boolean running = true;

		try {

			while (running) {
				System.out.print("> ");
				String command = scanner.nextLine();
				String[] commands = command.split(" ");

				switch (commands[0]) {

				case "bc": {
					createBackup(commands[1]);
					break;
				}

				case "greplong": {
					printLongestWord(commands[1]);
					break;
				}

				case "append": {
					appendFooter(commands[1]);
					break;
				}

				case "cat": {
					printContent(commands[1]);
					break;
				}

				case "setmod": {
					setPermissions(commands[1], commands[2]);
					break;
				}

				case "readmod": {
					printPermissions(commands[1]);
					break;
				}

				case "define": {
					define(commands[1]);
					break;
				}

				case "is_dir": {
					System.out.println(is_dir(commands[1]));
					break;
				}
				case "ls_py": {
					ls_py(commands[1]);
					System.out.println("");
					break;
				}

				case "ls": {
					ls(commands[1]);
					System.out.println("");
					break;
				}

				case "exit": {
					System.out.println("Good Bye !!!");
					running = false;
					break;
				}
				case "help": {
					System.out.println(HELP_MSG);
					break;
				}

				default:
					System.out.println("Doesn't recognized command, please try again or use help");
				}

			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private static String getExtension(Path path) {
		String fileName = path.getFileName().toString();
		int dotIndex = fileName.lastIndexOf('.');
		return (dotIndex > 0) ? fileName.substring(dotIndex + 1) : "";
	}

	private static String getDate() {
		SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy hh:mm");
		String date = formatter.format(new Date()).toString();
		return date = date.replaceAll(":", "-");

	}

	public static void createBackup(String path) {
		String folderName = "tmp";
		Path file = Paths.get(path);
		Path directory = Paths.get("");

		try {
			if (!Files.exists(Paths.get(folderName))) {
				directory = Files.createDirectory(Paths.get(folderName));
			} else {
				System.out.println("directory already created");
			}

			directory = Paths.get(folderName + "/" + getDate() + " backup." + getExtension(file));

			if (Files.exists(file)) {
				Files.copy(file, directory, StandardCopyOption.REPLACE_EXISTING);
			} else {
				System.out.println("no such file exist");
			}

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	public static void printLongestWord(String path) {
		File file = new File(path);
		String longestWord = "";

		if (file.exists() && (!file.isDirectory())) {

			Scanner scan;
			try {
				scan = new Scanner(file);

				while (scan.hasNextLine()) {
					String line = scan.nextLine();
					String[] arr = line.split(" ");
					for (String str : arr) {
						if (longestWord.length() < str.length()) {
							longestWord = str;
						}
					}
				}
				scan.close();

			} catch (FileNotFoundException e) {
				e.printStackTrace();

			}
		} else {
			System.out.println("this is not a file, or no such file exists");

		}
		if (longestWord.length() != 0) {
			System.out.println(longestWord);
		}

	}

	public static void printContent(String path) {
		File file = new File(path);
		Scanner scan;

		if (file.exists() && (!file.isDirectory())) {

			try {
				scan = new Scanner(file);

				while (scan.hasNextLine()) {
					System.out.println(scan.nextLine());
				}

				scan.close();

			} catch (FileNotFoundException e) {
				e.printStackTrace();

			}

		} else {
			System.out.println("this is not a file");
		}
	}

	public static void appendFooter(String path) {

		String textToAppend = "# Autogenerated line";

		try (BufferedWriter writer = new BufferedWriter(new FileWriter(path, true))) {
			writer.newLine();
			writer.write(textToAppend);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public static void setPermissions(String path, String permissions) {
		File file = new File(path);
		String[] arrModes = permissions.split("");

		boolean readeable = (arrModes[0].equalsIgnoreCase("r")) ? file.setReadable(true) : file.setReadable(false);
		boolean writable = (arrModes[1].equalsIgnoreCase("w")) ? file.setReadable(true) : file.setReadable(false);
		boolean exacutable = (arrModes[2].equalsIgnoreCase("x")) ? file.setReadable(true) : file.setReadable(false);

		file.setReadable(readeable);
		file.setWritable(writable);
		file.setExecutable(exacutable);

		System.out.print("Current rights - ");
		printPermissions(path);

	}

	public static void printPermissions(String path) {
		File file = new File(path);
		StringBuilder builder = new StringBuilder();

		if (file.canRead()) {
			builder.append("R");
		}
		if (file.canWrite()) {
			builder.append("W");
		}
		if (file.canExecute()) {
			builder.append("X");
		}
		System.out.println(builder.toString());

	}

	public static void define(String path) {
		File file = new File(path);
		if (file.isDirectory()) {
			System.out.println("directory");
		} else {
			System.out.println("file");
		}
	}

	public static boolean is_dir(String path) {
		File file = new File(path);
		return file.isDirectory();
	}

	public static void ls_py(String path) {
		String extension = ".py";
		File directory = new File(path);
		File[] files = directory.listFiles();

		if (files != null) {
			for (File file : files) {
				if (file.isFile() && file.getName().endsWith(extension)) {
					System.out.print(file.getName() + " ");

				}
			}
		} else {
			System.out.println("Error: Unable to list files in the current directory.");
		}
	}

	public static void ls(String path) {
		File file = new File(path);
		File[] files = file.listFiles();

		if (files != null) {
			for (int i = 0; i < files.length; i++) {
				File tempFileName = files[i];
				if (tempFileName.isFile()) {
					System.out.print(tempFileName.getName() + " ");
				}
			}
		}

	}

	private static final String HELP_MSG = "ls <path>               выводит список всех файлов и директорий для `path`\r\n"
			+ "ls_py <path>            выводит список файлов с расширением `.py` в `path`\r\n"
			+ "is_dir <path>           выводит `true`, если `path` это директория, в других случаях `false`\r\n"
			+ "define <path>           выводит `директория` или `файл` в зависимости от типа `path`\r\n"
			+ "readmod <path>          выводит права для файла в формате `rwx` для текущего пользователя\r\n"
			+ "setmod <path> <perm>    устанавливает права для файла `path`\r\n"
			+ "cat <path>              выводит контент файла\r\n"
			+ "append <path>           добавляет строку `# Autogenerated line` в конец `path`\r\n"
			+ "bc <path>               создает копию `path` в директорию `/tmp/${date}.backup` где, date - это дата в формате `dd-mm-yyyy`\r\n"
			+ "greplong <path>         выводит самое длинное слово в файле\r\n"
			+ "help                    выводит список команд и их описание\r\n"
			+ "exit                    завершает работу программы";
}
